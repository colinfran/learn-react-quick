"use strict";(self.webpackChunklearnreactquick=self.webpackChunklearnreactquick||[]).push([[133],{3905:(e,t,r)=>{r.d(t,{Zo:()=>u,kt:()=>f});var n=r(7294);function a(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function i(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function o(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?i(Object(r),!0).forEach((function(t){a(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):i(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function l(e,t){if(null==e)return{};var r,n,a=function(e,t){if(null==e)return{};var r,n,a={},i=Object.keys(e);for(n=0;n<i.length;n++)r=i[n],t.indexOf(r)>=0||(a[r]=e[r]);return a}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(n=0;n<i.length;n++)r=i[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(a[r]=e[r])}return a}var d=n.createContext({}),s=function(e){var t=n.useContext(d),r=t;return e&&(r="function"==typeof e?e(t):o(o({},t),e)),r},u=function(e){var t=s(e.components);return n.createElement(d.Provider,{value:t},e.children)},m="mdxType",p={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},c=n.forwardRef((function(e,t){var r=e.components,a=e.mdxType,i=e.originalType,d=e.parentName,u=l(e,["components","mdxType","originalType","parentName"]),m=s(r),c=a,f=m["".concat(d,".").concat(c)]||m[c]||p[c]||i;return r?n.createElement(f,o(o({ref:t},u),{},{components:r})):n.createElement(f,o({ref:t},u))}));function f(e,t){var r=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var i=r.length,o=new Array(i);o[0]=c;var l={};for(var d in t)hasOwnProperty.call(t,d)&&(l[d]=t[d]);l.originalType=e,l[m]="string"==typeof e?e:a,o[1]=l;for(var s=2;s<i;s++)o[s]=r[s];return n.createElement.apply(null,o)}return n.createElement.apply(null,r)}c.displayName="MDXCreateElement"},7747:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>d,contentTitle:()=>o,default:()=>p,frontMatter:()=>i,metadata:()=>l,toc:()=>s});var n=r(7462),a=(r(7294),r(3905));const i={sidebar_position:2},o="Form Validation and Error Handling",l={unversionedId:"forms-in-react/form-validation-and-error-handling",id:"forms-in-react/form-validation-and-error-handling",title:"Form Validation and Error Handling",description:"In this lesson, we'll learn how to perform form validation and error handling in React. Validating user input is essential to ensure data integrity and provide a smooth user experience.",source:"@site/docs/forms-in-react/form-validation-and-error-handling.md",sourceDirName:"forms-in-react",slug:"/forms-in-react/form-validation-and-error-handling",permalink:"/learn-react-quick/course/forms-in-react/form-validation-and-error-handling",draft:!1,tags:[],version:"current",sidebarPosition:2,frontMatter:{sidebar_position:2},sidebar:"tutorialSidebar",previous:{title:"Creating Controlled Forms",permalink:"/learn-react-quick/course/forms-in-react/creating-controlled-forms"},next:{title:"Styling React Components",permalink:"/learn-react-quick/course/category/styling-react-components"}},d={},s=[{value:"Add Validation Rules",id:"add-validation-rules",level:2},{value:"Add Validation State",id:"add-validation-state",level:2},{value:"Perform Validation on Form Submission",id:"perform-validation-on-form-submission",level:2},{value:"Update Input Styling Based on Validation",id:"update-input-styling-based-on-validation",level:2},{value:"Handle Error Display",id:"handle-error-display",level:2},{value:"Optional: Real-Time Validation",id:"optional-real-time-validation",level:2},{value:"Testing the Form",id:"testing-the-form",level:2},{value:"Completing the Component",id:"completing-the-component",level:2}],u={toc:s},m="wrapper";function p(e){let{components:t,...r}=e;return(0,a.kt)(m,(0,n.Z)({},u,r,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"form-validation-and-error-handling"},"Form Validation and Error Handling"),(0,a.kt)("p",null,"In this lesson, we'll learn how to perform form validation and error handling in React. Validating user input is essential to ensure data integrity and provide a smooth user experience."),(0,a.kt)("h2",{id:"add-validation-rules"},"Add Validation Rules"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"Determine the validation rules for your form fields (e.g., required, minimum length, maximum length, etc.)."),(0,a.kt)("li",{parentName:"ul"},"Consider using a library like Yup for more complex validation.")),(0,a.kt)("h2",{id:"add-validation-state"},"Add Validation State"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"Create state variables to store the validation status of each form field."),(0,a.kt)("li",{parentName:"ul"},"For example:",(0,a.kt)("pre",{parentName:"li"},(0,a.kt)("code",{parentName:"pre",className:"language-jsx"},"const [usernameError, setUsernameError] = React.useState('');\n")))),(0,a.kt)("h2",{id:"perform-validation-on-form-submission"},"Perform Validation on Form Submission"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"Modify the form's ",(0,a.kt)("inlineCode",{parentName:"li"},"onSubmit")," event handler to include form validation logic."),(0,a.kt)("li",{parentName:"ul"},"Validate the form fields according to your rules and update the validation state accordingly."),(0,a.kt)("li",{parentName:"ul"},"If there are errors, prevent the default form submission behavior and display error messages to the user.")),(0,a.kt)("h2",{id:"update-input-styling-based-on-validation"},"Update Input Styling Based on Validation"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"Modify the CSS styling of the form inputs to indicate validation errors visually."),(0,a.kt)("li",{parentName:"ul"},"For instance, you can add a red border or background to the input fields that have validation errors.")),(0,a.kt)("h2",{id:"handle-error-display"},"Handle Error Display"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"Display the error messages near the respective form fields to inform the user about the validation errors."),(0,a.kt)("li",{parentName:"ul"},"Show the error messages conditionally based on the validation state of each form field.")),(0,a.kt)("h2",{id:"optional-real-time-validation"},"Optional: Real-Time Validation"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"If desired, you can implement real-time validation, where error messages appear as the user types in the form field instead of waiting for form submission.")),(0,a.kt)("h2",{id:"testing-the-form"},"Testing the Form"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"Test the form with various scenarios, including valid and invalid input, to ensure the error handling works as expected.")),(0,a.kt)("h2",{id:"completing-the-component"},"Completing the Component"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"Make sure the ",(0,a.kt)("inlineCode",{parentName:"li"},"ControlledForm")," component is still functioning correctly after adding validation and error handling.")),(0,a.kt)("hr",null),(0,a.kt)("p",null,"By the end of this lesson, your form will be equipped with validation and error handling features, providing a more user-friendly experience and ensuring that the data submitted by users meets your specified requirements."),(0,a.kt)("hr",null),(0,a.kt)("p",null,'Congratulations! You have completed both lessons in Section 6 ("Forms in React"). In the next section, we will cover styling React components, where you\'ll learn how to add styles to your React components using inline styles and explore CSS-in-JS with Styled Components. Happy coding!'))}p.isMDXComponent=!0}}]);