"use strict";(self.webpackChunklearnreactquick=self.webpackChunklearnreactquick||[]).push([[898],{3905:(t,e,n)=>{n.d(e,{Zo:()=>l,kt:()=>g});var a=n(7294);function o(t,e,n){return e in t?Object.defineProperty(t,e,{value:n,enumerable:!0,configurable:!0,writable:!0}):t[e]=n,t}function i(t,e){var n=Object.keys(t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(t);e&&(a=a.filter((function(e){return Object.getOwnPropertyDescriptor(t,e).enumerable}))),n.push.apply(n,a)}return n}function r(t){for(var e=1;e<arguments.length;e++){var n=null!=arguments[e]?arguments[e]:{};e%2?i(Object(n),!0).forEach((function(e){o(t,e,n[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(t,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(e){Object.defineProperty(t,e,Object.getOwnPropertyDescriptor(n,e))}))}return t}function s(t,e){if(null==t)return{};var n,a,o=function(t,e){if(null==t)return{};var n,a,o={},i=Object.keys(t);for(a=0;a<i.length;a++)n=i[a],e.indexOf(n)>=0||(o[n]=t[n]);return o}(t,e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(t);for(a=0;a<i.length;a++)n=i[a],e.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(t,n)&&(o[n]=t[n])}return o}var c=a.createContext({}),u=function(t){var e=a.useContext(c),n=e;return t&&(n="function"==typeof t?t(e):r(r({},e),t)),n},l=function(t){var e=u(t.components);return a.createElement(c.Provider,{value:e},t.children)},p="mdxType",d={inlineCode:"code",wrapper:function(t){var e=t.children;return a.createElement(a.Fragment,{},e)}},m=a.forwardRef((function(t,e){var n=t.components,o=t.mdxType,i=t.originalType,c=t.parentName,l=s(t,["components","mdxType","originalType","parentName"]),p=u(n),m=o,g=p["".concat(c,".").concat(m)]||p[m]||d[m]||i;return n?a.createElement(g,r(r({ref:e},l),{},{components:n})):a.createElement(g,r({ref:e},l))}));function g(t,e){var n=arguments,o=e&&e.mdxType;if("string"==typeof t||o){var i=n.length,r=new Array(i);r[0]=m;var s={};for(var c in e)hasOwnProperty.call(e,c)&&(s[c]=e[c]);s.originalType=t,s[p]="string"==typeof t?t:o,r[1]=s;for(var u=2;u<i;u++)r[u]=n[u];return a.createElement.apply(null,r)}return a.createElement.apply(null,n)}m.displayName="MDXCreateElement"},6199:(t,e,n)=>{n.r(e),n.d(e,{assets:()=>c,contentTitle:()=>r,default:()=>d,frontMatter:()=>i,metadata:()=>s,toc:()=>u});var a=n(7462),o=(n(7294),n(3905));const i={sidebar_position:2},r="Managing State with useState Hook",s={unversionedId:"react-hooks/managing-state-with-usestate-hook",id:"react-hooks/managing-state-with-usestate-hook",title:"Managing State with useState Hook",description:"In this lesson, you will learn how to manage state in functional components using the useState Hook. The useState Hook allows you to add stateful logic to functional components without converting them into class components.",source:"@site/docs/react-hooks/managing-state-with-usestate-hook.md",sourceDirName:"react-hooks",slug:"/react-hooks/managing-state-with-usestate-hook",permalink:"/learn-react-quick/course/react-hooks/managing-state-with-usestate-hook",draft:!1,tags:[],version:"current",sidebarPosition:2,frontMatter:{sidebar_position:2},sidebar:"tutorialSidebar",previous:{title:"Introducing React Hooks",permalink:"/learn-react-quick/course/react-hooks/introducing-react-hooks"},next:{title:"Handling Side Effects with useEffect Hook",permalink:"/learn-react-quick/course/react-hooks/handling-side-effects-with-useeffect"}},c={},u=[{value:"Importing useState",id:"importing-usestate",level:2},{value:"Initializing State",id:"initializing-state",level:2},{value:"Accessing and Updating State",id:"accessing-and-updating-state",level:2},{value:"Functional Updates",id:"functional-updates",level:2}],l={toc:u},p="wrapper";function d(t){let{components:e,...n}=t;return(0,o.kt)(p,(0,a.Z)({},l,n,{components:e,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"managing-state-with-usestate-hook"},"Managing State with useState Hook"),(0,o.kt)("p",null,"In this lesson, you will learn how to manage state in functional components using the ",(0,o.kt)("inlineCode",{parentName:"p"},"useState")," Hook. The ",(0,o.kt)("inlineCode",{parentName:"p"},"useState")," Hook allows you to add stateful logic to functional components without converting them into class components."),(0,o.kt)("h2",{id:"importing-usestate"},"Importing useState"),(0,o.kt)("p",null,"   To use the ",(0,o.kt)("inlineCode",{parentName:"p"},"useState")," Hook, you need to import it from React."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-javascript"},"import React, { useState } from 'react';\n")),(0,o.kt)("h2",{id:"initializing-state"},"Initializing State"),(0,o.kt)("p",null,"   To initialize state in a functional component, use the ",(0,o.kt)("inlineCode",{parentName:"p"},"useState")," Hook by calling it with the initial state value. It returns an array with two elements: the current state value and a function to update the state."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-javascript"},"const [count, setCount] = useState(0);\n")),(0,o.kt)("p",null,"   In this example, we initialize the state with ",(0,o.kt)("inlineCode",{parentName:"p"},"0")," and set the state variable ",(0,o.kt)("inlineCode",{parentName:"p"},"count")," along with the ",(0,o.kt)("inlineCode",{parentName:"p"},"setCount")," function to update it."),(0,o.kt)("h2",{id:"accessing-and-updating-state"},"Accessing and Updating State"),(0,o.kt)("p",null,"   You can access the state variable ",(0,o.kt)("inlineCode",{parentName:"p"},"count")," directly, and to update it, use the ",(0,o.kt)("inlineCode",{parentName:"p"},"setCount")," function."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-javascript"},"// Accessing state\n<p>Count: {count}</p>\n\n// Updating state\n<button onClick={() => setCount(count + 1)}>Increment</button>\n")),(0,o.kt)("h2",{id:"functional-updates"},"Functional Updates"),(0,o.kt)("p",null,"   The ",(0,o.kt)("inlineCode",{parentName:"p"},"setState")," function returned by ",(0,o.kt)("inlineCode",{parentName:"p"},"useState")," does not automatically merge objects like the traditional ",(0,o.kt)("inlineCode",{parentName:"p"},"setState")," in class components. If your update depends on the previous state, you can use the functional update syntax:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-javascript"},"// Incrementing count using functional update\n<button onClick={() => setCount(prevCount => prevCount + 1)}>Increment</button>\n")))}d.isMDXComponent=!0}}]);