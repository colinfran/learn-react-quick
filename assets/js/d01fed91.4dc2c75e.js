"use strict";(self.webpackChunklearnreactquick=self.webpackChunklearnreactquick||[]).push([[567],{3905:(e,t,n)=>{n.d(t,{Zo:()=>d,kt:()=>k});var o=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);t&&(o=o.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,o)}return n}function s(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,o,a=function(e,t){if(null==e)return{};var n,o,a={},r=Object.keys(e);for(o=0;o<r.length;o++)n=r[o],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(o=0;o<r.length;o++)n=r[o],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var l=o.createContext({}),p=function(e){var t=o.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):s(s({},t),e)),n},d=function(e){var t=p(e.components);return o.createElement(l.Provider,{value:t},e.children)},c="mdxType",m={inlineCode:"code",wrapper:function(e){var t=e.children;return o.createElement(o.Fragment,{},t)}},u=o.forwardRef((function(e,t){var n=e.components,a=e.mdxType,r=e.originalType,l=e.parentName,d=i(e,["components","mdxType","originalType","parentName"]),c=p(n),u=a,k=c["".concat(l,".").concat(u)]||c[u]||m[u]||r;return n?o.createElement(k,s(s({ref:t},d),{},{components:n})):o.createElement(k,s({ref:t},d))}));function k(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var r=n.length,s=new Array(r);s[0]=u;var i={};for(var l in t)hasOwnProperty.call(t,l)&&(i[l]=t[l]);i.originalType=e,i[c]="string"==typeof e?e:a,s[1]=i;for(var p=2;p<r;p++)s[p]=n[p];return o.createElement.apply(null,s)}return o.createElement.apply(null,n)}u.displayName="MDXCreateElement"},7196:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>s,default:()=>m,frontMatter:()=>r,metadata:()=>i,toc:()=>p});var o=n(7462),a=(n(7294),n(3905));const r={sidebar_position:1},s="Applying Concepts to Create a Todo Application",i={unversionedId:"building-todo-app/applying-concepts-to-create-app",id:"building-todo-app/applying-concepts-to-create-app",title:"Applying Concepts to Create a Todo Application",description:"In this lesson, we'll apply the concepts we've learned so far to build a simple Todo application in React. The Todo app will allow users to add, complete, and remove tasks.",source:"@site/docs/building-todo-app/applying-concepts-to-create-app.md",sourceDirName:"building-todo-app",slug:"/building-todo-app/applying-concepts-to-create-app",permalink:"/learn-react-quick/course/building-todo-app/applying-concepts-to-create-app",draft:!1,tags:[],version:"current",sidebarPosition:1,frontMatter:{sidebar_position:1},sidebar:"tutorialSidebar",previous:{title:"Building a Todo App",permalink:"/learn-react-quick/course/category/building-a-todo-app"},next:{title:"State Management and Interaction",permalink:"/learn-react-quick/course/building-todo-app/state-management-and-interaction"}},l={},p=[{value:"Project Setup",id:"project-setup",level:2},{value:"Create Components",id:"create-components",level:2},{value:"Implement TodoForm",id:"implement-todoform",level:2},{value:"Implement TodoList",id:"implement-todolist",level:2},{value:"Implement TodoItem",id:"implement-todoitem",level:2},{value:"Managing Todo State",id:"managing-todo-state",level:2},{value:"Test the Todo App",id:"test-the-todo-app",level:2}],d={toc:p},c="wrapper";function m(e){let{components:t,...n}=e;return(0,a.kt)(c,(0,o.Z)({},d,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"applying-concepts-to-create-a-todo-application"},"Applying Concepts to Create a Todo Application"),(0,a.kt)("p",null,"In this lesson, we'll apply the concepts we've learned so far to build a simple Todo application in React. The Todo app will allow users to add, complete, and remove tasks."),(0,a.kt)("h2",{id:"project-setup"},"Project Setup"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"Create a new React project using Create React App or any other preferred method."),(0,a.kt)("li",{parentName:"ul"},"Install any necessary dependencies. For this tutorial, we'll use Styled Components for styling, so you can install it using npm or yarn:",(0,a.kt)("pre",{parentName:"li"},(0,a.kt)("code",{parentName:"pre"},"npm install styled-components\n")))),(0,a.kt)("h2",{id:"create-components"},"Create Components"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"Create a new folder called ",(0,a.kt)("inlineCode",{parentName:"li"},"components")," inside the ",(0,a.kt)("inlineCode",{parentName:"li"},"src")," folder to store your components."),(0,a.kt)("li",{parentName:"ul"},"Create a new file called ",(0,a.kt)("inlineCode",{parentName:"li"},"TodoForm.js")," inside the ",(0,a.kt)("inlineCode",{parentName:"li"},"components")," folder for the form component."),(0,a.kt)("li",{parentName:"ul"},"Create a new file called ",(0,a.kt)("inlineCode",{parentName:"li"},"TodoList.js")," inside the ",(0,a.kt)("inlineCode",{parentName:"li"},"components")," folder for the list component."),(0,a.kt)("li",{parentName:"ul"},"Create a new file called ",(0,a.kt)("inlineCode",{parentName:"li"},"TodoItem.js")," inside the ",(0,a.kt)("inlineCode",{parentName:"li"},"components")," folder for the individual task component.")),(0,a.kt)("h2",{id:"implement-todoform"},"Implement TodoForm"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},"In the ",(0,a.kt)("inlineCode",{parentName:"p"},"TodoForm.js")," file, import React and any necessary dependencies (e.g., Styled Components).")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},"Create a functional component called ",(0,a.kt)("inlineCode",{parentName:"p"},"TodoForm"),".")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},"In the component, create a form with an input field to add new tasks. Use controlled form inputs to manage the form state and the new task's description."),(0,a.kt)("pre",{parentName:"li"},(0,a.kt)("code",{parentName:"pre",className:"language-jsx"},"import React, { useState } from 'react';\nimport styled from 'styled-components';\n\nconst FormContainer = styled.div`\n  /* Add your custom styles here */\n`;\n\nconst TodoForm = () => {\n  const [newTask, setNewTask] = useState('');\n\n  const handleInputChange = (event) => {\n    setNewTask(event.target.value);\n  };\n\n  const handleFormSubmit = (event) => {\n    event.preventDefault();\n    // Add logic to handle adding the new task to the list\n    // You can use the state management concepts we've learned (e.g., React Context) to handle this.\n    // For this tutorial, we'll assume you have a function called `addTask` to add the task to the list.\n    addTask(newTask);\n    setNewTask(''); // Clear the input field after adding the task\n  };\n\n  return (\n    <FormContainer>\n      <form onSubmit={handleFormSubmit}>\n        <input type=\"text\" value={newTask} onChange={handleInputChange} placeholder=\"Add a new task\" />\n        <button type=\"submit\">Add Task</button>\n      </form>\n    </FormContainer>\n  );\n};\n\nexport default TodoForm;\n")))),(0,a.kt)("h2",{id:"implement-todolist"},"Implement TodoList"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},"In the ",(0,a.kt)("inlineCode",{parentName:"p"},"TodoList.js")," file, import React and any necessary dependencies (e.g., Styled Components).")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},"Create a functional component called ",(0,a.kt)("inlineCode",{parentName:"p"},"TodoList")," that receives a list of tasks as props from the parent component.")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},"Map through the list of tasks and render the ",(0,a.kt)("inlineCode",{parentName:"p"},"TodoItem")," component for each task."),(0,a.kt)("pre",{parentName:"li"},(0,a.kt)("code",{parentName:"pre",className:"language-jsx"},"import React from 'react';\nimport styled from 'styled-components';\nimport TodoItem from './TodoItem';\n\nconst ListContainer = styled.div`\n  /* Add your custom styles here */\n`;\n\nconst TodoList = ({ tasks }) => {\n  return (\n    <ListContainer>\n      {tasks.map((task) => (\n        <TodoItem key={task.id} task={task} />\n      ))}\n    </ListContainer>\n  );\n};\n\nexport default TodoList;\n")))),(0,a.kt)("h2",{id:"implement-todoitem"},"Implement TodoItem"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},"In the ",(0,a.kt)("inlineCode",{parentName:"p"},"TodoItem.js")," file, import React and any necessary dependencies (e.g., Styled Components).")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},"Create a functional component called ",(0,a.kt)("inlineCode",{parentName:"p"},"TodoItem")," that represents each individual task.")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},"Display the task description along with a checkbox for marking the task as completed and a button for deleting the task."),(0,a.kt)("pre",{parentName:"li"},(0,a.kt)("code",{parentName:"pre",className:"language-jsx"},"import React from 'react';\nimport styled from 'styled-components';\n\nconst ItemContainer = styled.div`\n  /* Add your custom styles here */\n`;\n\nconst TodoItem = ({ task }) => {\n  const handleCheckboxChange = () => {\n    // Add logic to handle marking the task as completed\n    // You can use the state management concepts we've learned (e.g., React Context) to handle this.\n    // For this tutorial, we'll assume you have a function called `toggleTaskCompletion` to toggle the task's completion status.\n    toggleTaskCompletion(task.id);\n  };\n\n  const handleDeleteClick = () => {\n    // Add logic to handle deleting the task\n    // You can use the state management concepts we've learned (e.g., React Context) to handle this.\n    // For this tutorial, we'll assume you have a function called `deleteTask` to delete the task.\n    deleteTask(task.id);\n  };\n\n  return (\n    <ItemContainer>\n      <input type=\"checkbox\" checked={task.completed} onChange={handleCheckboxChange} />\n      <span>{task.description}</span>\n      <button onClick={handleDeleteClick}>Delete</button>\n    </ItemContainer>\n  );\n};\n\nexport default TodoItem;\n")))),(0,a.kt)("h2",{id:"managing-todo-state"},"Managing Todo State"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"In the main application file (e.g., ",(0,a.kt)("inlineCode",{parentName:"li"},"App.js"),"), import React, TodoForm, TodoList, and any necessary dependencies (e.g., Styled Components)."),(0,a.kt)("li",{parentName:"ul"},"Manage the list of tasks using React ",(0,a.kt)("inlineCode",{parentName:"li"},"useState")," hook, and create functions to add, complete, and remove tasks.",(0,a.kt)("pre",{parentName:"li"},(0,a.kt)("code",{parentName:"pre",className:"language-jsx"},"import React, { useState } from 'react';\nimport styled from 'styled-components';\nimport Todo\n")))),(0,a.kt)("p",null,"Form from './components/TodoForm';\nimport TodoList from './components/TodoList';"),(0,a.kt)("p",null,"   const AppContainer = styled.div",(0,a.kt)("inlineCode",{parentName:"p"},"     /* Add your custom styles here */\n  "),";"),(0,a.kt)("p",null,"   const App = () => {\nconst ","[tasks, setTasks]"," = useState(","[\n{ id: 1, description: 'Learn React', completed: false },\n{ id: 2, description: 'Build a Todo App', completed: false },\n// Add more initial tasks if needed\n]",");"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"}," const addTask = (newTaskDescription) => {\n   const newTask = {\n     id: Date.now(), // Use a unique ID (you can use a library like uuid for production apps)\n     description: newTaskDescription,\n     completed: false,\n   };\n   setTasks([...tasks, newTask]);\n };\n\n const toggleTaskCompletion = (taskId) => {\n   setTasks((prevTasks) =>\n     prevTasks.map((task) =>\n       task.id === taskId ? { ...task, completed: !task.completed } : task\n     )\n   );\n };\n\n const deleteTask = (taskId) => {\n   setTasks((prevTasks) => prevTasks.filter((task) => task.id !== taskId));\n };\n\n return (\n   <AppContainer>\n     <h1>Todo App</h1>\n     <TodoForm addTask={addTask} />\n     <TodoList tasks={tasks} toggleTaskCompletion={toggleTaskCompletion} deleteTask={deleteTask} />\n   </AppContainer>\n );\n")),(0,a.kt)("p",null,"   };"),(0,a.kt)("p",null,"   export default App;"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"\n## Use React Context\n- In the main application file (e.g., `App.js`), create a new file called `AppContext.js`.\n- Inside `AppContext.js`, import React and create a new context using `React.createContext()`.\n- Create a context provider component (`AppContextProvider`) that wraps the entire Todo app and provides the global state of the Todo list and the functions to update it.\n- Use `AppContextProvider` to wrap the components in the `App` component.\n```jsx\nimport React, { createContext, useState } from 'react';\nimport styled from 'styled-components';\nimport TodoForm from './components/TodoForm';\nimport TodoList from './components/TodoList';\n\nconst AppContainer = styled.div`\n  /* Add your custom styles here */\n`;\n\nconst AppContext = createContext();\n\nconst AppContextProvider = ({ children }) => {\n  const [tasks, setTasks] = useState([\n    { id: 1, description: 'Learn React', completed: false },\n    { id: 2, description: 'Build a Todo App', completed: false },\n    // Add more initial tasks if needed\n  ]);\n\n  const addTask = (newTaskDescription) => {\n    const newTask = {\n      id: Date.now(), // Use a unique ID (you can use a library like uuid for production apps)\n      description: newTaskDescription,\n      completed: false,\n    };\n    setTasks([...tasks, newTask]);\n  };\n\n  const toggleTaskCompletion = (taskId) => {\n    setTasks((prevTasks) =>\n      prevTasks.map((task) =>\n        task.id === taskId ? { ...task, completed: !task.completed } : task\n      )\n    );\n  };\n\n  const deleteTask = (taskId) => {\n    setTasks((prevTasks) => prevTasks.filter((task) => task.id !== taskId));\n  };\n\n  return (\n    <AppContext.Provider value={{ tasks, addTask, toggleTaskCompletion, deleteTask }}>\n      {children}\n    </AppContext.Provider>\n  );\n};\n\nconst App = () => {\n  return (\n    <AppContextProvider>\n      <AppContainer>\n        <h1>Todo App</h1>\n        <TodoForm />\n        <TodoList />\n      </AppContainer>\n    </AppContextProvider>\n  );\n};\n\nexport default App;\n")),(0,a.kt)("h2",{id:"test-the-todo-app"},"Test the Todo App"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"Test the Todo app by adding, completing, and removing tasks. Verify that the global state is updated correctly, and the changes are reflected in all components that use the context.")),(0,a.kt)("hr",null),(0,a.kt)("p",null,"By the end of this lesson, you'll have a working Todo application in React, and you'll have a good understanding of how to manage state and interaction within a real-world React application."))}m.isMDXComponent=!0}}]);