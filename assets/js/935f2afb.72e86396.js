"use strict";(self.webpackChunklearnreactquick=self.webpackChunklearnreactquick||[]).push([[53],{1109:t=>{t.exports=JSON.parse('{"pluginId":"default","version":"current","label":"Next","banner":null,"badge":false,"noIndex":false,"className":"docs-version-current","isLast":true,"docsSidebars":{"tutorialSidebar":[{"type":"link","label":"Intro","href":"/learn-react-quick/course/intro","docId":"intro"},{"type":"category","label":"Introduction to React.js","collapsible":true,"collapsed":true,"items":[{"type":"link","label":"What is React.js?","href":"/learn-react-quick/course/introduction-to-react/what-is-react","docId":"introduction-to-react/what-is-react"},{"type":"link","label":"Setting up the Development Environment","href":"/learn-react-quick/course/introduction-to-react/setting-up-environment","docId":"introduction-to-react/setting-up-environment"},{"type":"link","label":"Creating Your First React Component!","href":"/learn-react-quick/course/introduction-to-react/creating-first-component","docId":"introduction-to-react/creating-first-component"}],"href":"/learn-react-quick/course/category/introduction-to-reactjs"},{"type":"category","label":"Understanding Components","collapsible":true,"collapsed":true,"items":[{"type":"link","label":"Functional Components vs. Class Components","href":"/learn-react-quick/course/understanding-components/functional-vs-class","docId":"understanding-components/functional-vs-class"},{"type":"link","label":"Using JSX to Create Elements","href":"/learn-react-quick/course/understanding-components/using-jsx","docId":"understanding-components/using-jsx"},{"type":"link","label":"Component Composition","href":"/learn-react-quick/course/understanding-components/component-composition","docId":"understanding-components/component-composition"}],"href":"/learn-react-quick/course/category/understanding-components"},{"type":"category","label":"State and Props","collapsible":true,"collapsed":true,"items":[{"type":"link","label":"Managing Component State","href":"/learn-react-quick/course/state-and-props/managing-component-state","docId":"state-and-props/managing-component-state"},{"type":"link","label":"Passing Data with Props","href":"/learn-react-quick/course/state-and-props/passing-date-with-props","docId":"state-and-props/passing-date-with-props"},{"type":"link","label":"Updating State with Event Handling","href":"/learn-react-quick/course/state-and-props/update-state-with-event","docId":"state-and-props/update-state-with-event"}],"href":"/learn-react-quick/course/category/state-and-props"},{"type":"category","label":"React Hooks","collapsible":true,"collapsed":true,"items":[{"type":"link","label":"Introducing React Hooks","href":"/learn-react-quick/course/react-hooks/introducing-react-hooks","docId":"react-hooks/introducing-react-hooks"},{"type":"link","label":"Managing State with useState Hook","href":"/learn-react-quick/course/react-hooks/managing-state-with-usestate-hook","docId":"react-hooks/managing-state-with-usestate-hook"},{"type":"link","label":"Handling Side Effects with useEffect Hook","href":"/learn-react-quick/course/react-hooks/handling-side-effects-with-useeffect","docId":"react-hooks/handling-side-effects-with-useeffect"}],"href":"/learn-react-quick/course/category/react-hooks"},{"type":"category","label":"Forms in React","collapsible":true,"collapsed":true,"items":[{"type":"link","label":"Creating Controlled Forms","href":"/learn-react-quick/course/forms-in-react/creating-controlled-forms","docId":"forms-in-react/creating-controlled-forms"},{"type":"link","label":"Form Validation and Error Handling","href":"/learn-react-quick/course/forms-in-react/form-validation-and-error-handling","docId":"forms-in-react/form-validation-and-error-handling"}],"href":"/learn-react-quick/course/category/forms-in-react"},{"type":"category","label":"Styling React Components","collapsible":true,"collapsed":true,"items":[{"type":"link","label":"Styling with Inline Styles","href":"/learn-react-quick/course/styling-react-components/styling-with-inline-styles","docId":"styling-react-components/styling-with-inline-styles"},{"type":"link","label":"CSS-in-JS with Styled Components","href":"/learn-react-quick/course/styling-react-components/css-in-js-with-styled-components","docId":"styling-react-components/css-in-js-with-styled-components"}],"href":"/learn-react-quick/course/category/styling-react-components"},{"type":"category","label":"Managing Global State","collapsible":true,"collapsed":true,"items":[{"type":"link","label":"Using React Context for State Management","href":"/learn-react-quick/course/managing-global-state/using-react-context-for-state-management","docId":"managing-global-state/using-react-context-for-state-management"},{"type":"link","label":"Creating a Simple Global State Example","href":"/learn-react-quick/course/managing-global-state/creating-simple-global-state-example","docId":"managing-global-state/creating-simple-global-state-example"}],"href":"/learn-react-quick/course/category/managing-global-state"},{"type":"category","label":"Building a Todo App","collapsible":true,"collapsed":true,"items":[{"type":"link","label":"Applying Concepts to Create a Todo Application","href":"/learn-react-quick/course/building-todo-app/applying-concepts-to-create-app","docId":"building-todo-app/applying-concepts-to-create-app"},{"type":"link","label":"State Management and Interaction","href":"/learn-react-quick/course/building-todo-app/state-management-and-interaction","docId":"building-todo-app/state-management-and-interaction"}],"href":"/learn-react-quick/course/category/building-a-todo-app"},{"type":"category","label":"Testing in React.js","collapsible":true,"collapsed":true,"items":[{"type":"link","label":"Writing Unit Tests with Jest and React Testing Library","href":"/learn-react-quick/course/react-testing/writing-unit-tests-with-jest-and-react-testing-library","docId":"react-testing/writing-unit-tests-with-jest-and-react-testing-library"},{"type":"link","label":"Testing React Components and Interactions","href":"/learn-react-quick/course/react-testing/testing-react-components-and-interactions","docId":"react-testing/testing-react-components-and-interactions"}],"href":"/learn-react-quick/course/category/testing-in-reactjs"},{"type":"link","label":"Completed","href":"/learn-react-quick/course/completed","docId":"completed"}]},"docs":{"building-todo-app/applying-concepts-to-create-app":{"id":"building-todo-app/applying-concepts-to-create-app","title":"Applying Concepts to Create a Todo Application","description":"In this lesson, we\'ll apply the concepts we\'ve learned so far to build a simple Todo application in React. The Todo app will allow users to add, complete, and remove tasks.","sidebar":"tutorialSidebar"},"building-todo-app/state-management-and-interaction":{"id":"building-todo-app/state-management-and-interaction","title":"State Management and Interaction","description":"In this lesson, we\'ll dive deeper into the state management and interaction within the Todo app. We\'ll enhance the app with more features and improve the user experience.","sidebar":"tutorialSidebar"},"completed":{"id":"completed","title":"Completed","description":"Congratulations!","sidebar":"tutorialSidebar"},"forms-in-react/creating-controlled-forms":{"id":"forms-in-react/creating-controlled-forms","title":"Creating Controlled Forms","description":"In this lesson, we\'ll explore how to create controlled forms in React. Controlled forms allow us to manage form state using React components, making it easier to handle form input and user interactions.","sidebar":"tutorialSidebar"},"forms-in-react/form-validation-and-error-handling":{"id":"forms-in-react/form-validation-and-error-handling","title":"Form Validation and Error Handling","description":"In this lesson, we\'ll learn how to perform form validation and error handling in React. Validating user input is essential to ensure data integrity and provide a smooth user experience.","sidebar":"tutorialSidebar"},"intro":{"id":"intro","title":"Intro","description":"Welcome to Learn React Quick! This is a super simple React.js course designed to help you become proficient in building web applications with React.js. Whether you\'re a complete beginner or looking to refresh your React.js skills, this course is the perfect starting point.","sidebar":"tutorialSidebar"},"introduction-to-react/creating-first-component":{"id":"introduction-to-react/creating-first-component","title":"Creating Your First React Component!","description":"Now that you have your environment set up, lets start building!","sidebar":"tutorialSidebar"},"introduction-to-react/setting-up-environment":{"id":"introduction-to-react/setting-up-environment","title":"Setting up the Development Environment","description":"Before we dive into creating React applications, let\'s set up our development environment to ensure we have all the necessary tools in place.","sidebar":"tutorialSidebar"},"introduction-to-react/what-is-react":{"id":"introduction-to-react/what-is-react","title":"What is React.js?","description":"React.js is awesome!","sidebar":"tutorialSidebar"},"managing-global-state/creating-simple-global-state-example":{"id":"managing-global-state/creating-simple-global-state-example","title":"Creating a Simple Global State Example","description":"In this lesson, we\'ll apply the concepts learned in the previous lesson to create a simple global state example using React Context.","sidebar":"tutorialSidebar"},"managing-global-state/using-react-context-for-state-management":{"id":"managing-global-state/using-react-context-for-state-management","title":"Using React Context for State Management","description":"In this lesson, we\'ll learn about React Context, a built-in feature that allows us to manage global state in a React application without prop drilling.","sidebar":"tutorialSidebar"},"react-hooks/handling-side-effects-with-useeffect":{"id":"react-hooks/handling-side-effects-with-useeffect","title":"Handling Side Effects with useEffect Hook","description":"In this lesson, you will learn how to handle side effects in functional components using the useEffect Hook. Side effects include tasks like data fetching, subscriptions, or manually interacting with the DOM, which need to be performed after React renders the component.","sidebar":"tutorialSidebar"},"react-hooks/introducing-react-hooks":{"id":"react-hooks/introducing-react-hooks","title":"Introducing React Hooks","description":"In this lesson, you will be introduced to React Hooks, a feature introduced in React 16.8. Hooks allow you to use state and other React features without writing a class. They provide a more concise and flexible way to work with stateful logic in functional components.","sidebar":"tutorialSidebar"},"react-hooks/managing-state-with-usestate-hook":{"id":"react-hooks/managing-state-with-usestate-hook","title":"Managing State with useState Hook","description":"In this lesson, you will learn how to manage state in functional components using the useState Hook. The useState Hook allows you to add stateful logic to functional components without converting them into class components.","sidebar":"tutorialSidebar"},"react-testing/testing-react-components-and-interactions":{"id":"react-testing/testing-react-components-and-interactions","title":"Testing React Components and Interactions","description":"In this lesson, we\'ll learn how to test React components that interact with each other, such as the TodoForm and TodoList components in the Todo app. We\'ll simulate user interactions and test the overall behavior of the app.","sidebar":"tutorialSidebar"},"react-testing/writing-unit-tests-with-jest-and-react-testing-library":{"id":"react-testing/writing-unit-tests-with-jest-and-react-testing-library","title":"Writing Unit Tests with Jest and React Testing Library","description":"In this lesson, we\'ll introduce you to writing unit tests for your React components using Jest and React Testing Library. Unit tests help ensure that individual parts of your code work as expected and can catch bugs early in the development process.","sidebar":"tutorialSidebar"},"state-and-props/managing-component-state":{"id":"state-and-props/managing-component-state","title":"Managing Component State","description":"In this lesson, you will learn about managing component state in React.js. State is used to store and manage data within a component, allowing it to maintain and update its values. You\'ll understand how to initialize state, update it, and utilize it to create dynamic and interactive components.","sidebar":"tutorialSidebar"},"state-and-props/passing-date-with-props":{"id":"state-and-props/passing-date-with-props","title":"Passing Data with Props","description":"In this lesson, you\'ll learn how to pass data from parent components to child components using props. Props are a way to pass data down the component tree, enabling communication between different parts of your application.","sidebar":"tutorialSidebar"},"state-and-props/update-state-with-event":{"id":"state-and-props/update-state-with-event","title":"Updating State with Event Handling","description":"In this lesson, you\'ll learn how to update the component state based on user interactions, such as button clicks or form submissions. Event handling is crucial for creating interactive React applications.","sidebar":"tutorialSidebar"},"styling-react-components/css-in-js-with-styled-components":{"id":"styling-react-components/css-in-js-with-styled-components","title":"CSS-in-JS with Styled Components","description":"In this lesson, we\'ll introduce CSS-in-JS and learn how to use Styled Components, a popular library for styling React components.","sidebar":"tutorialSidebar"},"styling-react-components/styling-with-inline-styles":{"id":"styling-react-components/styling-with-inline-styles","title":"Styling with Inline Styles","description":"In this lesson, we\'ll explore how to apply inline styles to React components. Inline styles allow us to add styles directly to individual components using JavaScript objects.","sidebar":"tutorialSidebar"},"understanding-components/component-composition":{"id":"understanding-components/component-composition","title":"Component Composition","description":"React encourages a component-based approach to building applications. Component composition involves combining multiple smaller components to form more complex and feature-rich components.","sidebar":"tutorialSidebar"},"understanding-components/functional-vs-class":{"id":"understanding-components/functional-vs-class","title":"Functional Components vs. Class Components","description":"React components can be created using two primary approaches: functional components and class components.","sidebar":"tutorialSidebar"},"understanding-components/using-jsx":{"id":"understanding-components/using-jsx","title":"Using JSX to Create Elements","description":"JSX is a powerful syntax extension that simplifies the process of creating React elements. It allows developers to write HTML-like code within JavaScript, making it easier to visualize and build the UI. JSX elements can represent both built-in HTML elements and custom React components.","sidebar":"tutorialSidebar"}}}')}}]);